ExercÃ­cio 1
Qual Ã© a funÃ§Ã£o do cÃ³digo de status 400 e 422?
R: erro nas informaÃ§Ãµes passadas pelo cliente


ExercÃ­cio 2
Qual Ã© a funÃ§Ã£o do cÃ³digo de status 401?
r: o cliente deve se autenticar para obter a resposta solicitada.

2) Crie o diretÃ³rio src e dentro dele um arquivo movies.json com o os filmes da nossa locadora:


3)ðŸš€ Crie um servidor Node.js utilizando o framework Express.
npm init -y
npm i express@4.17
criar uma pasta src/server.js e uma pasta app.js

4)ðŸš€ Crie uma funÃ§Ã£o de leitura do JSON com o modulo fs.

const fs = require('fs').promises;
const path = require('path');
const movie = path.resolve(_dirname, './moveis.json');

async function readPath() {
    try{
        const data = await fs.readFile(movie);
        return JSON.parse(data);
    } catch(error) {
        console.error(`Arquivo nÃ£o pode ser lido: ${error}`);
    }
};

5)ðŸš€ Crie um endpoint do tipo GET com a rota /movies/:id, que possa listar um filme do JSON por id.
app.get('/movie/:id', async(req, res) => {
    try{
      const movies = await readFile();
      const findMoveis = movies.find(({ id }) =>  id === Number(req.params.id));
      res.status(200).json(findMoveis)
    } catch(error) {
        res.status(500).send({ message: error.message })
    }
});

6)ðŸš€ Crie um endpoint do tipo GET com a rota /movies, que possa listar todos os filmes do JSON.

app.get('/movie', async (req, res) => {
    try{
        const film = await readFile();
        res.status(200).json(films);
    } catch(error) {
        res.status(500).send({ message: error.message })
    }
})


7)ðŸš€ Crie um endpoint do tipo POST com a rota /movies, para cadastrar um novo filme no JSON.

app.use(express.json());

app.post('/movies', async(req, res) => {
    try{
        const filmes = await readFile();
        const { movie, price } = req.body;

        const newMovies = {
            id: filmes[filmes.length - 1].id + 1,
            movie,
            price,
        };

         const allMovie = JSON.stringify([...filmes, newMovies])
         await fs.writeFile(moviePath, allMovie);
         res.status(201).json(newMovies);
    } catch(err) {
        res.status(500).send({ message: err.message })
    }
})

8)ðŸš€Crie um endpoint do tipo PUT com a rota /movies/:id, que possa editar informaÃ§Ãµes de um filme do JSON.